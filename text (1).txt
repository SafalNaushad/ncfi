In Angular, you can use the Array.prototype.findIndex() method to find the index of the object with the same ID in the array, and then use the Array.prototype.splice() method to remove it. Then you can use the Array.prototype.push() method to add the updated object to the array.
Here's an example of how you could do this in an Angular component:

import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  originalArray = [{id: 1, name: "item1"}, {id: 2, name: "item2"}];
  updatedObject = {id: 2, name: "updatedItem2"};

  updateArray() {
    let index = this.originalArray.findIndex(item => item.id === this.updatedObject.id);
    if(index !== -1) {
      this.originalArray.splice(index, 1, this.updatedObject);
    }
  }
}
In this example, the originalArray and updatedObject are properties of the component, and the updateArray() method uses the findIndex method to find the index of the object with the same ID in the originalArray and the splice method to remove it and insert the updatedObject to the same index.
You can then call this method in some event like a button click or ngOnInit()

<button (click)="updateArray()">Update Array</button>
This will find the object in the array that has the same ID as the updatedObject, remove it, and insert the updatedObject to the array at the same index.
You can also use Lodash to achieve the same result, and it is more efficient if you have large data set.

import _ from "lodash";

this.originalArray = _.map(this.originalArray, item => item.id === this.updatedObject.id ? this.updatedObject : item)
This will use the _.map method from Lodash library to loop through the array and replace the object with the same id as the updatedObject with the updatedObject.


